-- 1번 문제
SELECT DEPARTMENT_NAME 학과명  , CATEGORY 계열
FROM TB_DEPARTMENT;

-- 2번 문제
SELECT DEPARTMENT_NAME || '의 정원은' || CAPACITY || '명 입니다' "학과별 정원"
FROM TB_DEPARTMENT;

-- 3번 문제
SELECT STUDENT_NAME 
FROM TB_DEPARTMENT
LEFT JOIN TB_STUDENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME = '국어국문학과'
AND ABSENCE_YN = 'Y'
AND SUBSTR(STUDENT_SSN,8,1) = 2; 

-- 4번 문제
SELECT STUDENT_NAME
FROM TB_DEPARTMENT
LEFT JOIN TB_STUDENT USING (DEPARTMENT_NO)
WHERE STUDENT_NO IN ('A513079','A513090','A513091','A513110','A513119')
ORDER BY STUDENT_NO DESC;

-- 5번 문제
SELECT DEPARTMENT_NAME , CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN 20 AND 30;

-- 6번 문제
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

-- 7번 문제
SELECT STUDENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NO IS NULL;

-- 8번 문제
SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

-- 9번 문제
SELECT DISTINCT CATEGORY
FROM TB_DEPARTMENT;

-- 10번 문제
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_ADDRESS,1,2) = '전주'
AND SUBSTR(STUDENT_NO,1,2) ='A2' 
AND ABSENCE_YN = 'N';

--------------------------------------------------------------------------------
-- 1번 문제
SELECT STUDENT_NO 학번, STUDENT_NAME 이름,TO_CHAR(ENTRANCE_DATE,'YYYY-MM-DD') 입학년도
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 002
ORDER BY ENTRANCE_DATE ASC;

-- 2번 문제
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) = 2 
OR LENGTH(PROFESSOR_NAME) = 4;

-- 3번 문제
SELECT PROFESSOR_NAME "교수 이름", FLOOR((MONTHS_BETWEEN( SYSDATE, TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6),'RRMMDD') ) / 12 )) 나이
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN,8,1) = 1
ORDER BY PROFESSOR_SSN DESC;

-- 4번 문제
SELECT SUBSTR(PROFESSOR_NAME,2) 이름
FROM TB_PROFESSOR;

-- 5번 문제
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE SUBSTR;


--6번 문제
SELECT TO_CHAR(TO_DATE(20201225),'DAY') FROM DUAL;

--7번 문제 
SELECT TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD'),
       TO_DATE('99/10/11','RR/MM/DD'), TO_DATE('49/10/11','RR/MM/DD')
FROM DUAL;


-- 8번 문제
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO NOT LIKE 'A%';

-- 9번 문제
SELECT ROUND(AVG(POINT),1) 평점
FROM TB_GRADE
JOIN TB_STUDENT USING(STUDENT_NO)
WHERE STUDENT_NAME = '한아름'
AND sTUDENT_NO = 'A517178';

-- 10번 문제
SELECT DEPARTMENT_NO 학과번호,COUNT(*) "학생수(명)"
FROM TB_DEPARTMENT
JOIN TB_STUDENT USING (DEPARTMENT_NO)
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

-- 11번 문제
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

-- 12번 문제
SELECT SUBSTR(TERM_NO,1,4) 년도 , ROUND(AVG(POINT),1) "년도별 평점" 
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4)
ORDER BY 1;

-- 13번 문제
SELECT DEPARTMENT_NO 학과코드명, COUNT( DECODE(ABSENCE_YN,'Y', 'Y')) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

-- 14번 문제
SELECT STUDENT_NAME 동명이인, COUNT(STUDENT_NAME) "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME) != 1
ORDER BY STUDENT_NAME;

-- 15번 문제
SELECT SUBSTR(TERM_NO,1,4) 년도, SUBSTR(TERM_NO,5,2) 학기 ,POINT 평점
FROM TB_GRADE
JOIN TB_STUDENT USING(STUDENT_NO)
WHERE STUDENT_NO = 'A112113'
ORDER BY 1;

--------------------------------------------------------------------------------

-- 1번 문제
SELECT STUDENT_NAME "학생 이름", STUDENT_ADDRESS 주소지
FROM TB_STUDENT
ORDER BY STUDENT_NAME;

-- 2번 문제
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY STUDENT_SSN DESC;


-- 3번 문제
SELECT STUDENT_NAME 학생이름, STUDENT_NO 학번, STUDENT_ADDRESS "거주지 주소"
FROM TB_STUDENT
WHERE SUBSTR(ENTRANCE_DATE,1,1) = 1
GROUP BY STUDENT_NAME,STUDENT_NO,STUDENT_ADDRESS
HAVING SUBSTR(STUDENT_ADDRESS,1,2) IN ('경기','강원')
ORDER BY 1;

-- 4번 문제
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NO ='005'
ORDER BY PROFESSOR_SSN ASC;

-- 5번 문제
SELECT STUDENT_NO, TO_CHAR(POINT, '9.99') POINT
FROM TB_STUDENT
JOIN TB_GRADE USING(STUDENT_NO)
WHERE SUBSTR(TERM_NO,1,6)='200402'
AND CLASS_NO = 'C3118100'
ORDER BY POINT DESC;

-- 6번 문제
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
ORDER BY STUDENT_NAME ASC;

-- 7번 문제
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO);

-- 8번 문제 
-- TB_CLASS_PROFESSOR : 과목별 교수의 정보를 저장한 테이블 (과목 코드, 학과 코드)

-- ANSI 구문
SELECT CLASS_NAME, PROFESSOR_NAME 
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR USING(PROFESSOR_NO);

-- 조인의 잘못된 사용
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_PROFESSOR USING(DEPARTMENT_NO);
-- TB_CLASS와 TB_PROFESSOR 테이블이 공통으로
-- DEPARTMENT_NO 컬럼을 가지고 있다고 해서 이를 이용해서 JOIN 하면 안됨!
/*
TB_CLASS와 TB_PROFESSOR 테이블을 조회 해보면
같은 컬럼 값을 자기는 DEPARTMENT_NO가 많이 존재함
--> 이럴경우
    TB_CLASS의 DEPARTMENT_NO와
    TB_PROFESSOR의 DEPARTMENT_NO 컬럼 값들이
    서로 연결되기 위한 모든 경우의 수를 만들어냄 (곱집합이 되어버림)
*/
-- 오라클 구문
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS C, TB_CLASS_PROFESSOR CP, TB_PROFESSOR P
WHERE C.CLASS_NO = CP.CLASS_NO
AND CP.PROFESSOR_NO = P.PROFESSOR_NO;


-- 9번 문제
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR P USING(PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON(P.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE CATEGORY = '인문사회';

-- 오라클 구문
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS C, TB_CLASS_PROFESSOR CP, TB_PROFESSOR P, TB_DEPARTMENT D
WHERE C.CLASS_NO = CP.CLASS_NO 
AND CP.PROFESSOR_NO = P.PROFESSOR_NO
AND P.DEPARTMENT_NO = D.DEPARTMENT_NO
AND CATEGORY = '인문사회';

-- 10번 문제
SELECT STUDENT_NO 학번, STUDENT_NAME "학생 이름", ROUND(AVG(POINT),1) "전체 평점"
FROM TB_STUDENT
JOIN TB_GRADE USING(STUDENT_NO)
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NAME = '음악학과'
GROUP BY STUDENT_NO, STUDENT_NAME
ORDER BY STUDENT_NO;

--------------------------------------------------------------------------------

-- 1번 문제
SELECT STUDENT_NAME "학생 이름", STUDENT_ADDRESS 주소지
FROM TB_STUDENT
ORDER BY STUDENT_NAME ASC;

-- 2번 문제
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE  ABSENCE_YN = 'Y'
ORDER BY STUDENT_SSN DESC;

-- 3번 문제
SELECT STUDENT_NAME "학생 이름", STUDENT_NO 학번, STUDENT_ADDRESS "거주지 주소"
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_ADDRESS,1,2) IN ('경기', '강원')
AND ENTRANCE_DATE LIKE '19%'
ORDER BY STUDENT_NAME ASC;

-- 4번 문제
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NO = 005
ORDER BY PROFESSOR_SSN ASC;

-- 5번 문제
SELECT STUDENT_NO, TO_CHAR(POINT,'9.99') POINT
FROM TB_STUDENT
JOIN TB_GRADE USING(STUDENT_NO)
WHERE TERM_NO = 200402
AND CLASS_NO = 'C3118100'
ORDER BY POINT DESC,STUDENT_NO ASC ;

-- 6번 문제
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
ORDER BY STUDENT_NAME ASC;

-- 7번 문제
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO);

-- 8번 문제
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING (CLASS_NO)
JOIN TB_PROFESSOR USING(PROFESSOR_NO);

-- 9번 문제
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING (CLASS_NO)
JOIN TB_PROFESSOR P USING(PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON(P.DEPARTMENT_NO = D.DEPARTMENT_NO)
WHERE CATEGORY = '인문사회';

-- 10번 문제
SELECT STUDENT_NO 학번, STUDENT_NAME "학생 이름", ROUND(AVG(POINT),1) "전체 평점"
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
JOIN TB_GRADE USING(STUDENT_NO)
WHERE DEPARTMENT_NAME = '음악학과'
GROUP BY STUDENT_NO, STUDENT_NAME
ORDER BY STUDENT_NO ASC;

-- 11번 문제
SELECT DEPARTMENT_NAME 학과이름, STUDENT_NAME 학생이름, PROFESSOR_NAME 지도교수이름
FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047';

--  12번 문제
SELECT STUDENT_NAME, TERM_NO TERM_NAME FROM TB_STUDENT 
JOIN TB_GRADE USING(STUDENT_NO) 
JOIN TB_CLASS USING(CLASS_NO) 
WHERE SUBSTR(TERM_NO,3,2) = '07'  AND CLASS_NAME = '인간관계론'
ORDER BY 1;

-- 13번 문제
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
LEFT JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
WHERE CATEGORY = '예체능' AND PROFESSOR_NO IS NULL;

-- 14번 문제
SELECT STUDENT_NAME 학생이름, 
NVL(PROFESSOR_NAME, '지도교수 미지정') 지도교수 FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
LEFT JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO) 
WHERE DEPARTMENT_NAME = '서반아어학과' 
ORDER BY STUDENT_NO;

-- 15번 문제
SELECT STUDENT_NO 학번, STUDENT_NAME 이름, DEPARTMENT_NAME "학과 이름", 
ROUND(AVG(POINT), 8) 평점 FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
JOIN TB_GRADE USING(STUDENT_NO)
WHERE ABSENCE_YN = 'N' 
GROUP BY STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME 
HAVING ROUND(AVG(POINT), 8) >= 4.0 ORDER BY STUDENT_NO;

-- 16번 문제
SELECT CLASS_NO, CLASS_NAME, TRUNC(AVG(POINT),8)
FROM TB_CLASS
JOIN TB_GRADE USING(CLASS_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NO = '034'
AND CLASS_TYPE LIKE '전공%'
GROUP BY CLASS_NO, CLASS_NAME
ORDER BY 1 ASC;

-- 17번 문제
SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
WHERE DEPARTMENT_NO = ( SELECT DEPARTMENT_NO 
                        FROM TB_STUDENT 
                        WHERE STUDENT_NAME = '최경희');

-- 18번 문제
SELECT STUDENT_NO, STUDENT_NAME
FROM (SELECT STUDENT_NO, STUDENT_NAME
      FROM TB_STUDENT
      JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
      JOIN TB_GRADE USING (STUDENT_NO)
      WHERE DEPARTMENT_NAME = '국어국문학과'
      GROUP BY STUDENT_NO, STUDENT_NAME
      ORDER BY AVG(POINT) DESC)
WHERE ROWNUM = 1;

-- 18번 쌤 풀이
SELECT STUDENT_NO, STUDENT_NAME
FROM 
    (SELECT STUDENT_NO, STUDENT_NAME, AVG(POINT) 평점
     FROM TB_GRADE
     JOIN TB_STUDENT USING (STUDENT_NO)
     WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO
                                                 FROM TB_DEPARTMENT
                                                 WHERE DEPARTMENT_NAME = '국어국문학과')
     GROUP BY STUDENT_NO, STUDENT_NAME
     ORDER BY 3 DESC)
WHERE ROWNUM =1;

-- 19번 문제
SELECT DEPARTMENT_NAME "계열 학과명", ROUND(AVG(POINT), 1) 전공평점 
FROM TB_DEPARTMENT 
JOIN TB_CLASS USING(DEPARTMENT_NO) 
JOIN TB_GRADE USING(CLASS_NO) 
WHERE CATEGORY = (SELECT CATEGORY 
                  FROM TB_DEPARTMENT 
                  WHERE DEPARTMENT_NAME = '환경조경학과')
AND CLASS_TYPE LIKE '전공%' 
GROUP BY DEPARTMENT_NAME 
ORDER BY 1;


------------------------------------------------------------------------------
-- 1번 문제
SELECT EMP_ID, EMP_NAME, PHONE, TO_CHAR(HIRE_DATE,'YY/MM/DD')
FROM EMPLOYEE
WHERE DEPT_CODE = (SELECT DEPT_CODE
                    FROM EMPLOYEE
                    WHERE EMP_NAME = '전지연')
AND EMP_NAME != '전지연';

-- 2번 문제
SELECT EMP_ID, EMP_NAME, PHONE, SALARY, JOB_NAME
FROM EMPLOYEE
LEFT JOIN JOB USING(JOB_CODE)
WHERE SALARY IN (SELECT MAX(SALARY)
                   FROM EMPLOYEE
                   WHERE SUBSTR(HIRE_DATE,1,1) = 2);

-- 3번 문제
SELECT EMP_ID, EMP_NAME, PHONE, SALARY, JOB_NAME
FROM EMPLOYEE
LEFT JOIN JOB USING(JOB_CODE)
WHERE (DEPT_CODE, JOB_CODE) = (SELECT DEPT_CODE, JOB_CODE
                             FROM EMPLOYEE
                             WHERE EMP_NAME = '노옹철')
AND EMP_NAME != '노옹철';

-- 4번 문제
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, TO_CHAR(HIRE_DATE,'YY/MM/DD')
FROM EMPLOYEE
WHERE (DEPT_CODE, JOB_CODE) IN (SELECT DEPT_CODE, JOB_CODE
                                FROM EMPLOYEE
                                WHERE SUBSTR(HIRE_DATE,1,4) = 2000);




-- 5번 문제
SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID, EMP_NO, TO_CHAR(HIRE_DATE,'YY/MM/DD')
FROM EMPLOYEE
WHERE (DEPT_CODE, MANAGER_ID) IN (SELECT DEPT_CODE, MANAGER_ID
                                  FROM EMPLOYEE
                                  WHERE SUBSTR(EMP_NO,8,1) = 2
                                  AND SUBSTR(EMP_NO,1,2)= '77');
                                  
-- 6번 문제
SELECT EMP_ID, EMP_NAME, NVL(DEPT_TITLE,'소속없음'), JOB_NAME, TO_CHAR(HIRE_DATE,'YY/DD/MM')
FROM EMPLOYEE E
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE HIRE_DATE =(SELECT MIN(HIRE_DATE) 
                  FROM EMPLOYEE E2
                  WHERE E.DEPT_CODE = E2.DEPT_CODE
                  AND ENT_YN = 'N')
ORDER BY HIRE_DATE;

-- 7번 문제
SELECT EMP_ID, EMP_NAME, JOB_NAME, 
FLOOR((MONTHS_BETWEEN( SYSDATE, TO_DATE(SUBSTR(EMP_NO, 1, 6),'RRMMDD') ) / 12 )) 나이,
TO_CHAR(SALARY*12*(1+NVL(BONUS,0)),'L999,999,999') "보너스 포함 연봉"
FROM EMPLOYEE E
JOIN JOB J ON(E.JOB_CODE = J.JOB_CODE)
WHERE SUBSTR(EMP_NO,1,2) = (SELECT MAX(SUBSTR(EMP_NO,1,2))
                            FROM EMPLOYEE E2
                            WHERE E.JOB_CODE = E2.JOB_CODE)
ORDER BY 나이 DESC;












































































































